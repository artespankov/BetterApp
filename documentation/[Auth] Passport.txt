Passport library consists of 2 components
1. Passport - general helpers to handle Auth
2. Passport strategy - helpers to authenticate with one very specific method/provider (email/password, Google, Facebook etc)


High-level Auth strategy of every app:
1. User logs in to server with credentials (login/pass)
2. Server responds with identifier unique to person who logs in. It's called the token
3. User then is signing all the subsequent requests with that token
4. Server identifies the user and provides his requested resources
Cookie-based authentication:
 1. means the server is responding with token as a cookie - it sends back the header 'Set-Cookie: angkjrb'.
 2. Browser saves the cookie info in storage
 3. Browser then adds that token to any follow-up request in the cookie with the corresponding header 'Cookie: angkjrb'
 Alternative is to use JWT or other token-based strategy

Function of passport.js is to provide end-to-end authentication with different providers, like Google
1. It provides the set of callbacks following OAuth protocol
2. It has an api, including methods to serialize/deserialize the user ID to and from cookie for Cookie-based authentication
(passport.serializeUser(user object), which translates the user to unique identifier + passport.deserializeUser(user id that stored as cookie),
which translates the cookie info with user id back to user object)
3. Google's profile id only used for single case - authenticate the user against our DB; then in every request the internal ID (auto-generated by DB is used)